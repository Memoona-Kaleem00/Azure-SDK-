// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading.Tasks;
using Azure.Core;
using Azure.Identity;
using NUnit.Framework;

namespace Azure.AI.Vision.Face.Samples
{
    public partial class Samples_PersonGroupClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_CreatePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_name",
                userData = "your_user_data",
                recognitionModel = "recognition_01",
            });
            Response response = client.Create("your_person_group_id", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_CreatePersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_name",
                userData = "your_user_data",
                recognitionModel = "recognition_01",
            });
            Response response = await client.CreateAsync("your_person_group_id", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Create_CreatePersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.Create("your_person_group_id", "your_person_group_name");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Create_CreatePersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.CreateAsync("your_person_group_id", "your_person_group_name");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Delete_DeletePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.Delete("your_person_group_id");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Delete_DeletePersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.DeleteAsync("your_person_group_id");

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_GetPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetPersonGroup("your_person_group_id", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_GetPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetPersonGroupAsync("your_person_group_id", true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("name").ToString());
            Console.WriteLine(result.GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroup_GetPersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroup> response = client.GetPersonGroup("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroup_GetPersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroup> response = await client.GetPersonGroupAsync("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Update_UpdatePersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_name",
                userData = "your_user_data",
            });
            Response response = client.Update("your_person_group_id", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Update_UpdatePersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_name",
                userData = "your_user_data",
            });
            Response response = await client.UpdateAsync("your_person_group_id", content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_GetPersonGroups()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetPersonGroups("00000000-0000-0000-0000-000000000000", 20, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_GetPersonGroups_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetPersonGroupsAsync("00000000-0000-0000-0000-000000000000", 20, true, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("name").ToString());
            Console.WriteLine(result[0].GetProperty("personGroupId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetPersonGroups_GetPersonGroups_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<IReadOnlyList<PersonGroup>> response = client.GetPersonGroups();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetPersonGroups_GetPersonGroups_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<IReadOnlyList<PersonGroup>> response = await client.GetPersonGroupsAsync();
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_GetTrainingStatusOfPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetTrainingStatus("your_person_group_id", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_GetTrainingStatusOfPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetTrainingStatusAsync("your_person_group_id", null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("status").ToString());
            Console.WriteLine(result.GetProperty("createdDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastActionDateTime").ToString());
            Console.WriteLine(result.GetProperty("lastSuccessfulTrainingDateTime").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_GetTrainingStatus_GetTrainingStatusOfPersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<FaceTrainingResult> response = client.GetTrainingStatus("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_GetTrainingStatus_GetTrainingStatusOfPersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<FaceTrainingResult> response = await client.GetTrainingStatusAsync("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_CreatePersonInPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = client.CreatePerson("your_person_group_id", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_CreatePersonInPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = await client.CreatePersonAsync("your_person_group_id", content);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_CreatePerson_CreatePersonInPersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<CreatePersonResult> response = client.CreatePerson("your_person_group_id", "your_person_group_person_name");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_CreatePerson_CreatePersonInPersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<CreatePersonResult> response = await client.CreatePersonAsync("your_person_group_id", "your_person_group_person_name");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_DeletePerson_DeletePersonFromPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.DeletePerson("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_DeletePerson_DeletePersonFromPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.DeletePersonAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_GetPersonFromPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetPerson("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_GetPersonFromPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetPersonAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("personId").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPerson_GetPersonFromPersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroupPerson> response = client.GetPerson("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPerson_GetPersonFromPersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroupPerson> response = await client.GetPersonAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_UpdatePerson_UpdatePersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = client.UpdatePerson("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_UpdatePerson_UpdatePersonGroupPerson_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                name = "your_person_group_person_name",
                userData = "your_user_data",
            });
            Response response = await client.UpdatePersonAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_GetPersonsFromPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetPersons("your_person_group_id", "00000000-0000-0000-0000-000000000000", 20, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_GetPersonsFromPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetPersonsAsync("your_person_group_id", "00000000-0000-0000-0000-000000000000", 20, null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result[0].GetProperty("personId").ToString());
            Console.WriteLine(result[0].GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPerson_GetPersons_GetPersonsFromPersonGroup_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = client.GetPersons("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPerson_GetPersons_GetPersonsFromPersonGroup_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<IReadOnlyList<PersonGroupPerson>> response = await client.GetPersonsAsync("your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_DeleteFace_DeleteFaceFromPersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.DeleteFace("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_DeleteFace_DeleteFaceFromPersonGroupPerson_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.DeleteFaceAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_GetFaceFormPersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = client.GetFace("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_GetFaceFormPersonGroupPerson_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response response = await client.GetFaceAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), null);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("persistedFaceId").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_GetFace_GetFaceFormPersonGroupPerson_Convenience()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroupPersonFace> response = client.GetFace("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_GetFace_GetFaceFormPersonGroupPerson_Convenience_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Response<PersonGroupPersonFace> response = await client.GetFaceAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"));
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroupPersonFace_UpdateFace_UpdateFaceInPersonGroupPerson()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "your_user_data",
            });
            Response response = client.UpdateFace("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroupPersonFace_UpdateFace_UpdateFaceInPersonGroupPerson_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            using RequestContent content = RequestContent.Create(new
            {
                userData = "your_user_data",
            });
            Response response = await client.UpdateFaceAsync("your_person_group_id", Guid.Parse("25985303-c537-4467-b41d-bdb45cd95ca1"), Guid.Parse("43897a75-8d6f-42cf-885e-74832febb055"), content);

            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PersonGroup_Train_TrainPersonGroup()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Operation operation = client.Train(WaitUntil.Completed, "your_person_group_id");
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PersonGroup_Train_TrainPersonGroup_Async()
        {
            Uri endpoint = new Uri("<endpoint>");
            AzureKeyCredential credential = new AzureKeyCredential("<key>");
            PersonGroupClient client = new FaceAdministrationClient(endpoint, credential).GetPersonGroupClient();

            Operation operation = await client.TrainAsync(WaitUntil.Completed, "your_person_group_id");
        }
    }
}
